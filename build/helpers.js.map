{"version":3,"file":"helpers.js","sourceRoot":"/","sources":["helpers.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,SAAgB,MAAM;IACpB,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;QAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE;YAC3C,IAAI,IAAI,GAAG,CAAC;SACb;QACD,IAAI,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;KAC5E;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAVD,wBAUC;AAED,SAAgB,QAAQ,CAAC,EAAU,EAAE,MAAe,KAAK;IACvD,IAAI,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IACxC,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IACrC,OAAO,GAAG,CAAC;AACb,CAAC;AAJD,4BAIC;AAWD;;GAEG;AACH,MAAa,YAAY;IAAzB;QAEE;;WAEG;QACK,UAAK,GAAoB,EAAE,CAAC;QAEpC;;WAEG;QACK,YAAO,GAAY,KAAK,CAAC;IAuDnC,CAAC;IArDC;;;;;OAKG;IACI,OAAO,CAAY,OAAyB;QACjD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBACd,OAAO;gBACP,OAAO;gBACP,MAAM;aACP,CAAC,CAAC;YACH,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACK,OAAO;QACb,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO,KAAK,CAAC;SACd;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QAChC,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,KAAK,CAAC;SACd;QAED,IAAI;YACF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,OAAO,EAAE;iBACX,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;gBACd,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACtB,CAAC,CAAC;iBACD,KAAK,CAAC,GAAG,CAAC,EAAE;gBACX,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC;iBACD,OAAO,CAAC,GAAG,EAAE;gBACZ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,OAAO,EAAE,CAAA;YAChB,CAAC,CAAC,CAAC;SAEN;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAjED,oCAiEC","sourcesContent":["/**\n * UUIDv4 generator (RFC4122 compliant)\n */\nexport function uuidv4(): string {\n  let uuid = '';\n  for (let i = 0; i < 32; i++) {\n    const random = Math.random() * 16 | 0;\n    if (i == 8 || i == 12 || i == 16 || i == 20) {\n      uuid += '-';\n    }\n    uuid += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);\n  }\n  return uuid;\n}\n\nexport function getHexId(id: number, ext: boolean = false): string {\n  let str = id.toString(16).toUpperCase();\n  str = str.padStart(ext ? 8 : 3, '0');\n  return str;\n}\n\n/**\n * Interface for a queued promise in the `PromiseQueue`.\n */\ninterface QueuedPromise<T = any> {\n  promise: () => Promise<T>;\n  resolve: (value: T) => void;\n  reject: (reason?: any) => void;\n}\n\n/**\n * A simple promise queue to process some tasks in the order they where queued.\n */\nexport class PromiseQueue {\n\n  /**\n   * Queued promises.\n   */\n  private queue: QueuedPromise[] = [];\n\n  /**\n   * Indicator if a promise is working.\n   */\n  private working: boolean = false;\n\n  /**\n   * Enqueue a promise.\n   * This will add the given promise to the queue. If the queue is empty, the promise will be started immediately.\n   * @param promise Function to create the Promise.\n   * @returns A promise wich will be resolved (or rejected) if the enqueued promise is done.\n   */\n  public enqueue<T = void> (promise: () => Promise<T>): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.queue.push({\n        promise,\n        resolve,\n        reject,\n      });\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Dequeue (start) the first promise currently in the queue if there is no working promise.\n   * @returns `true` if a new promise from the queue is started or `false` if an other promise is working or the queue is empty.\n   */\n  private dequeue (): boolean {\n    if (this.working) {\n      return false;\n    }\n\n    const item = this.queue.shift();\n    if (!item) {\n      return false;\n    }\n\n    try {\n      this.working = true;\n      item.promise()\n        .then((value) => {\n          item.resolve(value);\n        })\n        .catch(err => {\n          item.reject(err);\n        })\n        .finally(() => {\n          this.working = false;\n          this.dequeue()\n        });\n\n    } catch (err) {\n      item.reject(err);\n      this.working = false;\n      this.dequeue();\n    }\n\n    return true;\n  }\n}"]}