{"version":3,"file":"main.js","sourceRoot":"/","sources":["main.ts"],"names":[],"mappings":"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","sourcesContent":["import * as utils from '@iobroker/adapter-core';\nimport { autobind } from 'core-decorators';\nimport { CanMessage } from 'socketcan';\n\nimport { CanInterface } from './can-interface';\nimport { getHexId, PromiseQueue } from './helpers';\n\nimport { knownParsers } from './parsers'\n\nimport {\n  MESSAGE_ID_REGEXP,\n  MESSAGE_ID_REGEXP_WITH_DLC,\n  PARSER_ID_REGEXP,\n  PARSER_ID_RESERVED\n} from './consts';\n\nexport class CanBusAdapter extends utils.Adapter {\n\n  private canInterface: CanInterface | null = null;\n\n  /**\n   * Mapping of CAN hex message IDs to the message configs.\n   * The IDs must be hex strings (3 or 8 chars) to differentiate between\n   * stanard frame and extended frame messages.\n   */\n  private canId2Message: Record<string, MessageConfig> = {};\n\n  constructor(options: Partial<utils.AdapterOptions> = {}) {\n    super({\n      ...options,\n      name: 'canbus',\n    });\n\n    this.on('ready', this.onReady);\n    this.on('stateChange', this.onStateChange);\n    this.on('unload', this.onUnload);\n  }\n\n  /**\n   * Is called when databases are connected and adapter received configuration.\n   */\n  @autobind\n  private async onReady(): Promise<void> {\n    // Reset the connection indicator during startup\n    this.setState('info.connection', false, true);\n\n    await this.setupObjects();\n\n    this.canInterface = new CanInterface(this);\n    this.canInterface.on('stopped', () => {\n      this.setState('info.connection', false, true);\n    });\n    this.canInterface.on('message', this.handleCanMsg);\n\n    if (this.canInterface.start()) {\n      this.setState('info.connection', true, true);\n    }\n\n    this.subscribeStatesAsync('*');\n  }\n\n  /**\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\n   */\n  @autobind\n  private onUnload(callback: () => void): void {\n    try {\n      if (this.canInterface) {\n        this.canInterface.stop();\n      }\n\n      this.log.debug('cleaned everything up...');\n      callback();\n    } catch (e) {\n      callback();\n    }\n  }\n\n  /**\n   * Is called if a subscribed state changes.\n   *\n   * This will trigger the sending of messages and conversion from parser states\n   * into message json states if configured.\n   */\n  @autobind\n  private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n    if (state) {\n      // The state was changed\n      this.log.silly(`state ${id} changed: ${JSON.stringify(state)}`);\n\n      // don't do anything if the state is acked\n      if (state.ack) return;\n\n      // raw.send state?\n      if (this.config.useRawStates && id === `${this.namespace}.raw.send`) {\n        // load and check message data\n        let canMsg: CanMessage;\n        try {\n          canMsg = JSON.parse(state.val as string)\n        } catch (e) {\n          this.log.warn(`Invalid JSON in '${this.namespace}.raw.send' state cannot be send!`);\n          return;\n        }\n        if (canMsg && Array.isArray(canMsg.data)) {\n          canMsg.data = Buffer.from(canMsg.data);\n        }\n        if (!canMsg || typeof canMsg.id !== 'number' || !Buffer.isBuffer(canMsg.data)) {\n          this.log.warn(`Invalid message data in '${this.namespace}.raw.send' state cannot be send!`);\n          return;\n        }\n\n        // send the message\n        this.log.debug(`sendig data from raw.send state`);\n        if (this.sendCanMsg(canMsg.id, canMsg.ext || false, canMsg.data, canMsg.rtr || false)) {\n          // set ack flag if the message was send and not already acked\n          if (!state.ack) {\n            await this.setStateAsync(id, {\n              ...state,\n              ack: true\n            });\n          }\n        }\n        return;\n      }\n\n      // get msg und state ID\n      const [,, msgId, stateId] = id.split('.');\n\n      // we only want states of a message objects\n      if (!msgId || !stateId || !msgId.match(MESSAGE_ID_REGEXP_WITH_DLC)) return;\n\n      const msgCfg = this.canId2Message[msgId];\n\n      // we need a message and the message must be configured for sending\n      if (!msgCfg || !msgCfg.send) return;\n\n      switch (stateId) {\n        case 'send':\n          if (state.val !== true) return;\n\n          // use the message action queue to make sure the parsers are done before sending\n          msgCfg.actionQueue?.enqueue(async () => {\n            // send the current json data\n            if (await this.sendMessageJsonData(msgCfg)) {\n              // set ack flag on the send state if the message was sent\n              await this.setStateAsync(`${msgCfg.idWithDlc}.send`, {\n                ...state,\n                ack: true\n              });\n            }\n          });\n\n          break;\n\n        case 'json':\n          // let the parsers read the data from json to keep the parsers data in sync with the json data\n          this.processParsers(this.getBufferFromJsonState(state, msgCfg.idWithDlc), msgCfg);\n\n          // send current json data\n          if (msgCfg.autosend) {\n            this.sendMessageJsonData(msgCfg, state);\n          }\n          break;\n\n        case 'rtr':\n          // nothing to do here\n          break;\n\n        default:\n          // it may be a parser...\n          if (!stateId.match(PARSER_ID_REGEXP)) return;\n\n          // find and run the configured parser\n          for (const parserUuid in msgCfg.parsers) {\n            if (msgCfg.parsers[parserUuid].id !== stateId) continue;\n\n            // check if the parser is initialized\n            const parser = msgCfg.parsers[ parserUuid ];\n\n            // use the message action queue to make sure the parsers (and a possible followed send) run in correct order\n            msgCfg.actionQueue?.enqueue(async () => {\n              if (!parser.instance) {\n                return;\n              }\n\n              // load the current json from state\n              const jsonState = await this.getStateAsync(`${msgCfg.idWithDlc}.json`);\n              let data: Buffer | Error | null = this.getBufferFromJsonState(jsonState, msgCfg.idWithDlc);\n              if (data === null) {\n                return;\n              }\n\n              // write to data using the parser\n              data = await parser.instance.write(data, state.val);\n\n              // check the write result\n              if (data instanceof Error) {\n                this.log.warn(`Parser writing data for message ID ${msgCfg.idWithDlc} parser ID ${parser.id} failed: ${data}`);\n                return;\n              }\n              if (!(data instanceof Buffer)) {\n                this.log.warn(`Parser writing data for message ID ${msgCfg.idWithDlc} parser ID ${parser.id} failed: Did not return a buffer`);\n                return;\n              }\n\n              // set the new json state with ack=false\n              await this.setStateAsync(`${msgCfg.idWithDlc}.json`, JSON.stringify([...data]), false);\n\n              // set ack flag on the parser state\n              await this.setStateAsync(`${msgCfg.idWithDlc}.${parser.id}`, {\n                ...state,\n                ack: true\n              });\n            });\n\n            break;\n          }\n      }\n\n    } else {\n      // The state was deleted\n      this.log.silly(`state ${id} deleted`);\n    }\n  }\n\n  /**\n   * Get a buffer from a `.json` state.\n   * The JSON string of the state will be parsed and checked to be an array.\n   * @param state The state to get the data from.\n   * @param msgId The message ID for logging in case of errors.\n   */\n  private getBufferFromJsonState (state: ioBroker.State | null | undefined, msgId: string): Buffer | null {\n    if (!state) {\n      this.log.warn(`Failed parsing JSON from ${this.namespace}.${msgId}.json: No state found`);\n      return null;\n    }\n\n    let parsedJson: unknown;\n    try {\n      parsedJson = JSON.parse(state.val as string);\n    } catch (err) {\n      this.log.warn(`Failed parsing JSON from ${this.namespace}.${msgId}.json: ${err}`);\n      return null;\n    }\n\n    if (!Array.isArray(parsedJson)) {\n      this.log.warn(`JSON data in ${this.namespace}.${msgId}.json is not an array!`);\n      return null;\n    }\n    if (parsedJson.length > 8) {\n      this.log.warn(`Array length of JSON data in ${this.namespace}.${msgId}.json is greater than 8. Only up to 8 data bytes are supported!`);\n      return null;\n    }\n\n    return Buffer.from(parsedJson);\n  }\n\n  /**\n   * Send the data of a message present in it's json state.\n   * For the json and rtr states of the message the ack flag will be set if the message is sent.\n   * @param msgCfg The `MessageConfig` of the message for which we should send the data.\n   * @param state Optional state to use for sending. If not set, the current state of the object will be read.\n   * @return `true` if the message was sent.\n   */\n  private async sendMessageJsonData (msgCfg: MessageConfig, state?: ioBroker.State | null | undefined): Promise<boolean> {\n    // read the state if not given by argument\n    if (!state) {\n      state = await this.getStateAsync(`${msgCfg.idWithDlc}.json`);\n      if (!state) {\n        this.log.warn(`No state found to send for ${this.namespace}.${msgCfg.idWithDlc}.json`);\n        return false;\n      }\n    }\n\n    // parse and check the json data\n    const data = this.getBufferFromJsonState(state, msgCfg.idWithDlc);\n    if (data === null) {\n      return false;\n    }\n\n    // get rtr flag from state\n    const rtrState = this.config.useRtrFlag && await this.getStateAsync(`${msgCfg.idWithDlc}.rtr`);\n    const rtr = rtrState && !!rtrState.val || false;\n\n    // send the message\n    if (this.sendCanMsg(msgCfg.idNum, msgCfg.ext, data, rtr)) {\n      // set ack flag on json if the message was send and not already acked\n      if (!state.ack) {\n        await this.setStateAsync(`${msgCfg.idWithDlc}.json`, {\n          ...state,\n          ack: true\n        });\n      }\n\n      // set ack on rtr if not already acked\n      if (rtrState && !rtrState.ack) {\n        await this.setStateAsync(`${msgCfg.idWithDlc}.rtr`, {\n          ...rtrState,\n          ack: true\n        });\n      }\n\n      // set raw state if enabled\n      if (this.config.useRawStates) {\n        const canMsg: CanMessage = {\n          id: msgCfg.idNum,\n          ext: msgCfg.ext,\n          data\n        }\n        if (this.config.useRtrFlag) {\n          canMsg.rtr = rtr;\n        }\n        this.setStateAsync('raw.send', {\n          val: JSON.stringify({\n            ...canMsg,\n            data: [...data]\n          }),\n          ack: true\n        });\n      }\n\n      return true;\n    } else {\n      this.log.warn(`Sending data message for ${msgCfg.idWithDlc} failed!`);\n      return false;\n    }\n  }\n\n  /**\n   * Setup the object tree for the messages and parsers.\n   */\n  private async setupObjects (): Promise<void> {\n    // loop over configured messages\n    for (const msgUuid in this.config.messages) {\n      const msg = this.config.messages[msgUuid];\n      if (!msg.id.match(MESSAGE_ID_REGEXP)) {\n        this.log.warn(`Message-ID ${msg.id} is invalid. This message will be ignored.`);\n        continue;\n      }\n\n      const msgCfg: MessageConfig = {\n        ...msg,\n        idNum: parseInt(msg.id, 16),\n        idWithDlc: (msg.dlc >= 0) ? `${msg.id}-${msg.dlc}` : msg.id,\n        ext: msg.id.length > 3,\n        uuid: msgUuid,\n      };\n\n      await this.setupMessage(msgUuid, msgCfg);\n    }\n\n    // delete unconfigured message objects\n    if (this.config.deleteUnconfiguredMessages) {\n      const objList = await this.getObjectListAsync({\n        startkey: `${this.namespace}.`,\n        endkey: `${this.namespace}.\\u9999`\n      });\n\n      // loop over all objects in the namespace of the adapter and check them\n      for (const obj of objList.rows) {\n        // check if obj is a channel (all message objects are created as channel)\n        if (obj.value.type !== 'channel') continue;\n\n        // obj id must have three parts\n        const idParts = obj.id.split('.');\n        if (idParts.length !== 3) continue;\n\n        // obj id part 2 (msgId) must match the message id regexp\n        if (!idParts[2].match(MESSAGE_ID_REGEXP_WITH_DLC)) continue;\n\n        const [id, dlcStr] = idParts[2].split('-');\n        const dlc = (dlcStr === undefined) ? -1 : parseInt(dlcStr, 10);\n\n        // is a message with this native.uuid configured with this id?\n        if (this.config.messages && this.config.messages[obj.value.native.uuid] && this.config.messages[obj.value.native.uuid].id === id && this.config.messages[obj.value.native.uuid].dlc === dlc) continue;\n\n        // not configured... delete it recursively\n        this.log.debug(`delete unconfigured message ${obj.id}`);\n        await this.delForeignObjectAsync(obj.id, { recursive: true });\n      }\n    }\n\n    // create or remove raw states\n    if (this.config.useRawStates) {\n      // raw states are enabled\n      await this.extendObjectAsync('raw', {\n        type: 'channel',\n        common: {\n          name: 'Raw message data'\n        },\n        native: {}\n      });\n      await this.extendObjectAsync('raw.received', {\n        type: 'state',\n        common: {\n          role: 'json',\n          type: 'string',\n          name: 'Last received message',\n          read: true,\n          write: false\n        },\n        native: {}\n      });\n      await this.extendObjectAsync('raw.send', {\n        type: 'state',\n        common: {\n          role: 'json',\n          type: 'string',\n          name: 'Last send message or message to send',\n          read: true,\n          write: true\n        },\n        native: {}\n      });\n    } else {\n      // raw states are disabled... delete them if exists\n      const chan = await this.getObjectAsync('raw');\n      if (chan) {\n        this.log.debug(`delete raw objects/states`);\n        await this.delObjectAsync('raw', { recursive: true });\n      }\n    }\n  }\n\n  /**\n   * Translate a configured data type to the corresponding ioBroker common type.\n   * @param dataType Data type from the config.\n   * @return The ioBroker common type.\n   */\n  private getCommonTypeFromDataType(dataType: ioBroker.AdapterConfigDataType): ioBroker.CommonType {\n    switch (dataType) {\n      case 'int8':\n      case 'uint8':\n      case 'int16_be':\n      case 'uint16_le':\n      case 'int16_be':\n      case 'uint16_le':\n      case 'int32_be':\n      case 'uint32_le':\n      case 'int32_be':\n      case 'uint32_le':\n      case 'float32_be':\n      case 'float32_le':\n      case 'double64_be':\n      case 'double64_le':\n        return 'number';\n      case 'boolean':\n        return 'boolean';\n      case 'string':\n        return 'string';\n      default: // e.g. for custom\n        return 'mixed';\n    }\n  }\n\n  /**\n   * Handler for received CAN messages.\n   * @param msg The received CAN message.\n   */\n  @autobind\n  private async handleCanMsg (msg: CanMessage): Promise<void> {\n    // TODO: maybe need to check the numeric ID against a Set of known IDs for\n    //       a better performance on systems with very high message load?\n\n    const msgIdHex = getHexId(msg.id, !!msg.ext);\n    let handled = false;\n\n    // save to raw state if enabled\n    if (this.config.useRawStates) {\n      this.setStateAsync('raw.received', {\n        val: JSON.stringify({\n          ...msg,\n          data: [...msg.data]\n        }),\n        ack: true\n      });\n    }\n\n    if (this.canId2Message[msgIdHex]) {\n      // it's a known message without DLC\n      await this.processReceivedCanMsg(msg, this.canId2Message[msgIdHex]);\n      handled = true;\n    }\n    if (this.canId2Message[`${msgIdHex}-${msg.data.length}`]) {\n      // it's a known message with defined DLC\n      await this.processReceivedCanMsg(msg, this.canId2Message[`${msgIdHex}-${msg.data.length}`]);\n      handled = true;\n    }\n\n    // just end here if the message was handled by at least one config\n    if (handled) {\n      return;\n    }\n\n    if (this.config.autoAddSeenMessages) {\n      // it's not known but we should add it\n      this.log.debug(`auto adding new message ${msg.id}`);\n      const msgCfg: MessageConfig = {\n        id: msgIdHex,\n        idNum: msg.id,\n        idWithDlc: msgIdHex,\n        ext: msgIdHex.length > 3,\n        uuid: null,\n        name: `CAN-Message 0x${msgIdHex}`,\n        dlc: -1,\n        autosend: false,\n        send: false,\n        receive: true,\n        parsers: {}\n      };\n      await this.setupMessage(null, msgCfg);\n\n      this.setStateAsync(`${msgCfg.id}.json`, JSON.stringify([...msg.data]), true);\n      if (this.config.useRtrFlag) {\n        this.setStateAsync(`${msgCfg.id}.rtr`, !!msg.rtr, true);\n      }\n    } else {\n      // known message... just ignore\n      this.log.debug(`ignoring message ${msg.id}`);\n    }\n  }\n\n  /**\n   * Send a CAN message with the given properties.\n   * @param id The numeric ID of the CAN message.\n   * @param ext `true` if the message should be send in extended frame format.\n   * @param data The data of the message. 0 to 8 bytes buffer.\n   * @param rtr Remote transmission request flag.\n   */\n  private sendCanMsg (id: number, ext: boolean, data: Buffer, rtr: boolean): boolean {\n    if (!this.canInterface || !this.canInterface.isReady()) {\n      this.log.warn(`Could not send data because CAN interface is not ready.`);\n      return false;\n    }\n\n    return this.canInterface.send(id, ext, data, rtr);\n  }\n\n  /**\n   * Process a received CAN message using the given message config.\n   * @param msg The received CAN message.\n   * @param msgCfg The config for the Message.\n   */\n  private async processReceivedCanMsg (msg: CanMessage, msgCfg: MessageConfig): Promise<void> {\n    // do nothing if the message isn't configured for receiving\n    if (!msgCfg.receive) return;\n\n    // set raw states\n    this.setStateAsync(`${msgCfg.idWithDlc}.json`, JSON.stringify([...msg.data]), true);\n    if (this.config.useRtrFlag) {\n      this.setStateAsync(`${msgCfg.idWithDlc}.rtr`, !!msg.rtr, true);\n    }\n\n    // run the configured parsers\n    this.processParsers(msg.data, msgCfg);\n  }\n\n  /**\n   * Process all parsers configured for a message to read the values from a buffer.\n   * @param buf The buffer containing the data to read from.\n   * @param msgCfg The message config to use.\n   */\n  private async processParsers (buf: Buffer | null, msgCfg: MessageConfig): Promise<void> {\n    if (!buf) return;\n\n    for (const parserUuid in msgCfg.parsers) {\n      // check if the parser is initialized\n      const parser = msgCfg.parsers[parserUuid];\n      if (parser.instance) {\n        const readResult = await parser.instance.read(buf);\n        // check if the parser has read a value (null indicates an error)\n        if (readResult instanceof Error) {\n          this.log.warn(`Parser reading from received data for ${msgCfg.idWithDlc} failed: ${readResult}`);\n          continue;\n        }\n        if (readResult === undefined) {\n          this.log.debug(`read parser for ${msgCfg.idWithDlc} returned undefined`);\n          continue;\n        }\n        this.setStateAsync(`${msgCfg.idWithDlc}.${parser.id}`, readResult as any, true);\n      }\n    }\n  }\n\n  /**\n   * Setup a message for use in this adapter.\n   * This will create/update all needed/configured objects for a message.\n   * This will also initialize the parsers if configured.\n   * @param msgUuid UUID of the message or `null` if it is an unconfigured message.\n   * @param msgCfg The message config containing the information about the message.\n   */\n  private async setupMessage(msgUuid: string | null, msgCfg: MessageConfig): Promise<void> {\n    this.log.debug(`create/update message id: ${msgCfg.idWithDlc}, uuid: ${msgUuid}`);\n\n    // check if this message is already set up\n    if (this.canId2Message[msgCfg.idWithDlc]) {\n      this.log.warn(`Cannot setup message with id ${msgCfg.idWithDlc} because it's already set up! Maybe this message is configured twice?`)\n      return;\n    }\n\n    // create/update channel object for the message\n    await this.extendObjectAsync(msgCfg.idWithDlc, {\n      type: 'channel',\n      common: {\n        name: msgCfg.name || `CAN-Message 0x${msgCfg.id}${msgCfg.dlc >= 0 ? ` DLC ${msgCfg.dlc}` : ''}`\n      },\n      native: {\n        uuid: msgUuid\n      }\n    });\n\n    // create/update \"raw\" data state\n    await this.extendObjectAsync(`${msgCfg.idWithDlc}.json`, {\n      type: 'state',\n      common: {\n        name: `JSON data`,\n        role: 'json',\n        type: 'string',\n        read: true,\n        write: msgCfg.send // allow write only if the message is configured for sending\n      },\n      native: {}\n    });\n\n    // create/update or delete \"rtr\" state\n    if (this.config.useRtrFlag) {\n      await this.extendObjectAsync(`${msgCfg.idWithDlc}.rtr`, {\n        type: 'state',\n        common: {\n          name: `Remote Transmission Request`,\n          role: 'indicator',\n          type: 'boolean',\n          read: true,\n          write: msgCfg.send // allow write only if the message is configured for sending\n        },\n        native: {}\n      });\n    } else {\n      const obj = await this.getObjectAsync(`${msgCfg.idWithDlc}.rtr`);\n      if (obj) {\n        await this.delObjectAsync(`${msgCfg.idWithDlc}.rtr`);\n      }\n    }\n\n    // create/update or delete \"send\" state depending on \"send\" option\n    if (msgCfg.send) {\n      await this.extendObjectAsync(`${msgCfg.idWithDlc}.send`, {\n        type: 'state',\n        common: {\n          name: msgCfg.autosend ? 'Manually send current data' : 'Send current data',\n          role: 'button',\n          type: 'boolean',\n          read: false,\n          write: true\n        },\n        native: {}\n      });\n    } else {\n      const obj = await this.getObjectAsync(`${msgCfg.idWithDlc}.send`);\n      if (obj) {\n        await this.delObjectAsync(`${msgCfg.idWithDlc}.send`);\n      }\n    }\n\n    // setup parser objects\n    for (const parserUuid in msgCfg.parsers) {\n      const parser = msgCfg.parsers[parserUuid];\n      if (PARSER_ID_RESERVED.includes(parser.id)) {\n        this.log.warn(`Parser ID ${parser.id} of message ID ${msgCfg.idWithDlc} is reserved and not allowed. This parser will be ignored.`);\n        continue;\n      }\n      if (!parser.id.match(PARSER_ID_REGEXP)) {\n        this.log.warn(`Parser ID ${parser.id} of message ID ${msgCfg.idWithDlc} is invalid. This parser will be ignored.`);\n        continue;\n      }\n      this.log.debug(`create/update parser ${msgCfg.idWithDlc}.${parser.id}`);\n      await this.extendObjectAsync(`${msgCfg.idWithDlc}.${parser.id}`, {\n        type: 'state',\n        common: {\n          name: parser.name || `Parser ${parser.id}`,\n          //role: 'state', // don't set the role here to let the user change it in admin\n          type: this.getCommonTypeFromDataType(parser.dataType),\n          unit: parser.dataUnit,\n          read: true,\n          write: msgCfg.send // allow write only if the message is configured for sending\n        },\n        native: {\n          uuid: parserUuid\n        }\n      });\n    }\n\n    // remove unconfigured parsers\n    const objList = await this.getObjectListAsync({\n      startkey: `${this.namespace}.${msgCfg.idWithDlc}.`,\n      endkey: `${this.namespace}.${msgCfg.idWithDlc}.\\u9999`\n    });\n    for (const obj of objList.rows) {\n      // check if obj is a state (all parser objects are created as state)\n      if (obj.value.type !== 'state') continue;\n\n      // obj id must have four parts\n      const idParts = obj.id.split('.');\n      if (idParts.length !== 4) continue;\n\n      // obj id part 3 (parserId) must not be in the reserved ids\n      if (PARSER_ID_RESERVED.includes(idParts[3])) continue;\n\n      // is a parser with this native.uuid configured with this id?\n      if (msgCfg.parsers[obj.value.native.uuid] && msgCfg.parsers[obj.value.native.uuid].id === idParts[3]) continue;\n\n      // not configured... delete it with all it's child objects\n      this.log.debug(`delete unconfigured parser ${obj.id}`);\n      await this.delForeignObjectAsync(obj.id);\n    }\n\n    // create action queue\n    msgCfg.actionQueue = new PromiseQueue();\n\n    // save to our canId->msg mapping\n    this.canId2Message[msgCfg.idWithDlc] = msgCfg;\n\n    // setup the parser instances\n    for (const parserUuid in msgCfg.parsers) {\n      for (const Parser of knownParsers) {\n        if (Parser.canHandle(msgCfg.parsers[parserUuid].dataType)) {\n          msgCfg.parsers[parserUuid].instance = new Parser(this, msgCfg.parsers[parserUuid]);\n          break;\n        }\n      }\n      if (!msgCfg.parsers[parserUuid].instance) {\n        this.log.warn(`No matching parser found for message ID ${msgCfg.idWithDlc} parser ID ${msgCfg.parsers[parserUuid].id} data type ${msgCfg.parsers[parserUuid].dataType}`);\n      }\n    }\n  }\n}\n\nif (module.parent) {\n  // Export the constructor in compact mode\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new CanBusAdapter(options);\n} else {\n  // otherwise start the instance directly\n  (() => new CanBusAdapter())();\n}\n"]}