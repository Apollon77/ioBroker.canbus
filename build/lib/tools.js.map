{"version":3,"file":"tools.js","sourceRoot":"/","sources":["lib/tools.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAE1B;;;GAGG;AACH,SAAgB,QAAQ,CAAC,EAAW;IAClC,6BAA6B;IAC7B,2BAA2B;IAC3B,yBAAyB;IACzB,gCAAgC;IAChC,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,iBAAiB,CAAC;AAClE,CAAC;AAND,4BAMC;AAED;;;GAGG;AACH,SAAgB,OAAO,CAAC,EAAW;IACjC,IAAI,KAAK,CAAC,OAAO,IAAI,IAAI;QAAE,OAAO,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACpD,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,gBAAgB,CAAC;AACjE,CAAC;AAHD,0BAGC;AAED;;;;;GAKG;AACI,KAAK,UAAU,aAAa,CAAC,IAAY,EAAE,UAAkB,EAAE,YAAqB;IACzF,IAAI,UAAU,KAAK,IAAI,EAAE;QACvB,OAAO,IAAI,CAAC;KACb;SAAM,IAAI,CAAC,IAAI,EAAE;QAChB,OAAO,EAAE,CAAC;KACX;IACD,IAAI,YAAY,EAAE;QAChB,OAAO,eAAe,CAAC,IAAI,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;KACxD;SAAM;QACL,OAAO,eAAe,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;KAC1C;AACH,CAAC;AAXD,sCAWC;AAED;;;;;GAKG;AACH,KAAK,UAAU,eAAe,CAAC,IAAY,EAAE,UAAkB,EAAE,MAAc;;IAC7E,IAAI,UAAU,KAAK,OAAO,EAAE;QAC1B,UAAU,GAAG,IAAI,CAAC;KACnB;IACD,IAAI;QACF,MAAM,GAAG,GAAG,+DAA+D,MAAM,SAAS,kBAAkB,CAAC,IAAI,CAAC,YAAY,UAAU,EAAE,CAAC;QAC3I,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,EAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAC,CAAC,CAAC;QACpD,IAAI,OAAO,OAAC,QAAQ,CAAC,IAAI,0CAAE,IAAI,CAAC,EAAE;YAChC,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAC9B;QACD,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;KAC3D;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,2BAA2B,UAAU,MAAM,CAAC,EAAE,CAAC,CAAC;KACjE;AACH,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,eAAe,CAAC,IAAY,EAAE,UAAkB;;IAC7D,IAAI;QACF,MAAM,GAAG,GAAG,0EAA0E,UAAU,WAAW,kBAAkB,CAAC,IAAI,CAAC,oBAAoB,CAAC;QACxJ,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,EAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAC,CAAC,CAAC;QACpD,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAC1B,0BAA0B;YAC1B,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/B;QACD,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;KAC3D;IAAC,OAAO,CAAC,EAAE;QACV,IAAI,OAAA,CAAC,CAAC,QAAQ,0CAAE,MAAM,MAAK,GAAG,EAAE;YAC9B,MAAM,IAAI,KAAK,CACb,2BAA2B,UAAU,qCAAqC,CAC3E,CAAC;SACH;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,2BAA2B,UAAU,MAAM,CAAC,EAAE,CAAC,CAAC;SACjE;KACF;AACH,CAAC","sourcesContent":["import axios from 'axios';\n\n/**\n * Tests whether the given variable is a real object and not an Array\n * @param it The variable to test\n */\nexport function isObject(it: unknown): it is Record<string, any> {\n  // This is necessary because:\n  // typeof null === 'object'\n  // typeof [] === 'object'\n  // [] instanceof Object === true\n  return Object.prototype.toString.call(it) === '[object Object]';\n}\n\n/**\n * Tests whether the given variable is really an Array\n * @param it The variable to test\n */\nexport function isArray(it: unknown): it is any[] {\n  if (Array.isArray != null) return Array.isArray(it);\n  return Object.prototype.toString.call(it) === '[object Array]';\n}\n\n/**\n * Translates text using the Google Translate API\n * @param text The text to translate\n * @param targetLang The target languate\n * @param yandexApiKey The yandex API key. You can create one for free at https://translate.yandex.com/developers\n */\nexport async function translateText(text: string, targetLang: string, yandexApiKey?: string): Promise<string> {\n  if (targetLang === 'en') {\n    return text;\n  } else if (!text) {\n    return '';\n  }\n  if (yandexApiKey) {\n    return translateYandex(text, targetLang, yandexApiKey);\n  } else {\n    return translateGoogle(text, targetLang);\n  }\n}\n\n/**\n * Translates text with Yandex API\n * @param text The text to translate\n * @param targetLang The target languate\n * @param apiKey The yandex API key. You can create one for free at https://translate.yandex.com/developers\n */\nasync function translateYandex(text: string, targetLang: string, apiKey: string): Promise<string> {\n  if (targetLang === 'zh-cn') {\n    targetLang = 'zh';\n  }\n  try {\n    const url = `https://translate.yandex.net/api/v1.5/tr.json/translate?key=${apiKey}&text=${encodeURIComponent(text)}&lang=en-${targetLang}`;\n    const response = await axios({url, timeout: 15000});\n    if (isArray(response.data?.text)) {\n      return response.data.text[0];\n    }\n    throw new Error('Invalid response for translate request');\n  } catch (e) {\n    throw new Error(`Could not translate to \"${targetLang}\": ${e}`);\n  }\n}\n\n/**\n * Translates text with Google API\n * @param text The text to translate\n * @param targetLang The target languate\n */\nasync function translateGoogle(text: string, targetLang: string): Promise<string> {\n  try {\n    const url = `http://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}&ie=UTF-8&oe=UTF-8`;\n    const response = await axios({url, timeout: 15000});\n    if (isArray(response.data)) {\n      // we got a valid response\n      return response.data[0][0][0];\n    }\n    throw new Error('Invalid response for translate request');\n  } catch (e) {\n    if (e.response?.status === 429) {\n      throw new Error(\n        `Could not translate to \"${targetLang}\": Rate-limited by Google Translate`\n      );\n    } else {\n      throw new Error(`Could not translate to \"${targetLang}\": ${e}`);\n    }\n  }\n}\n"]}