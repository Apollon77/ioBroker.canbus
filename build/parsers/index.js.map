{"version":3,"file":"index.js","sourceRoot":"/","sources":["parsers/index.ts"],"names":[],"mappings":";;;AACA,uCAA0C;AAC1C,qCAAwC;AACxC,qCAAwC;AACxC,qCAAwC;AAaxC;;GAEG,CAAA;;;;EAIA;AACU,QAAA,YAAY,GAAiB;IACxC,uBAAa;IACb,qBAAY;IACZ,qBAAY;IACZ,qBAAY;CACb,CAAC","sourcesContent":["import { ParserBase } from './base';\nimport { ParserBoolean } from './boolean';\nimport { ParserCustom } from './custom';\nimport { ParserNumber } from './number';\nimport { ParserString } from './string';\n\n/**\n * Type of `ParserBase` class, needed to create the `ParserLike` interface.\n */\ntype ParserBaseClass = typeof ParserBase;\n\n/**\n * Interface which represents any possible subclasses of `ParserBase`.\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface ParserLike extends ParserBaseClass { }\n\n/**\n * Array of all known parsers.\n *//*\n * Each parser which may be used must be listed here!\n * The parsers will be loaded dynamically based on this list in `main.ts`.\n * No need to add new parsers somewhere else than here.\n */\nexport const knownParsers: ParserLike[] = [\n  ParserBoolean,\n  ParserNumber,\n  ParserString,\n  ParserCustom\n];\n"]}