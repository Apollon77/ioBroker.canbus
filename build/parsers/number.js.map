{"version":3,"file":"number.js","sourceRoot":"/","sources":["parsers/number.ts"],"names":[],"mappings":"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","sourcesContent":["import { CanBusAdapter } from '../main';\nimport { ParserBase } from './base';\n\n/**\n * Parser for handling of well known number values.\n */\nexport class ParserNumber extends ParserBase {\n\n  protected static readonly handledDataTypes: ioBroker.AdapterConfigDataType[] = [\n    'int8',\n    'uint8',\n    'int16_be',\n    'int16_le',\n    'uint16_be',\n    'uint16_le',\n    'int32_be',\n    'int32_le',\n    'uint32_be',\n    'uint32_le',\n    'float32_be',\n    'float32_le',\n    'double64_be',\n    'double64_le'\n  ];\n\n  constructor(adapter: CanBusAdapter, parserConfig: ioBroker.AdapterConfigMessageParser) {\n    super(adapter, parserConfig);\n  }\n\n  public async read(buf: Buffer): Promise<number | Error> {\n    try {\n      switch (this.cfg.dataType) {\n        case 'int8':        return buf.readInt8(this.cfg.dataOffset);\n        case 'uint8':       return buf.readUInt8(this.cfg.dataOffset);\n        case 'int16_be':    return buf.readInt16BE(this.cfg.dataOffset);\n        case 'int16_le':    return buf.readInt16LE(this.cfg.dataOffset);\n        case 'uint16_be':   return buf.readUInt16BE(this.cfg.dataOffset);\n        case 'uint16_le':   return buf.readUInt16LE(this.cfg.dataOffset);\n        case 'int32_be':    return buf.readInt32BE(this.cfg.dataOffset);\n        case 'int32_le':    return buf.readInt32LE(this.cfg.dataOffset);\n        case 'uint32_be':   return buf.readUInt32BE(this.cfg.dataOffset);\n        case 'uint32_le':   return buf.readUInt32LE(this.cfg.dataOffset);\n        case 'float32_be':  return buf.readFloatBE(this.cfg.dataOffset);\n        case 'float32_le':  return buf.readFloatLE(this.cfg.dataOffset);\n        case 'double64_be': return buf.readDoubleBE(this.cfg.dataOffset);\n        case 'double64_le': return buf.readDoubleLE(this.cfg.dataOffset);\n        default: return new Error(`This parser can't handle the type ${this.cfg.dataType}`);\n      }\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async write(buf: Buffer, val: number): Promise<Buffer | Error> {\n    try {\n      switch (this.cfg.dataType) {\n        case 'int8':        buf.writeInt8(val, this.cfg.dataOffset); break;\n        case 'uint8':       buf.writeUInt8(val, this.cfg.dataOffset); break;\n        case 'int16_be':    buf.writeInt16BE(val, this.cfg.dataOffset); break;\n        case 'int16_le':    buf.writeInt16LE(val, this.cfg.dataOffset); break;\n        case 'uint16_be':   buf.writeUInt16BE(val, this.cfg.dataOffset); break;\n        case 'uint16_le':   buf.writeUInt16LE(val, this.cfg.dataOffset); break;\n        case 'int32_be':    buf.writeInt32BE(val, this.cfg.dataOffset); break;\n        case 'int32_le':    buf.writeInt32LE(val, this.cfg.dataOffset); break;\n        case 'uint32_be':   buf.writeUInt32BE(val, this.cfg.dataOffset); break;\n        case 'uint32_le':   buf.writeUInt32LE(val, this.cfg.dataOffset); break;\n        case 'float32_be':  buf.writeFloatBE(val, this.cfg.dataOffset); break;\n        case 'float32_le':  buf.writeFloatLE(val, this.cfg.dataOffset); break;\n        case 'double64_be': buf.writeDoubleBE(val, this.cfg.dataOffset); break;\n        case 'double64_le': buf.writeDoubleLE(val, this.cfg.dataOffset); break;\n        default: return new Error(`This parser can't handle the type ${this.cfg.dataType}`);\n      }\n    } catch (err) {\n      return err;\n    }\n    return buf;\n  }\n}"]}