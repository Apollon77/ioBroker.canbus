{"version":3,"file":"base.js","sourceRoot":"/","sources":["parsers/base.ts"],"names":[],"mappings":";;;AAEA;;;;GAIG;AACH,MAAsB,UAAU;IAc9B,YAAY,OAAsB,EAAE,YAAiD;QACnF,IAAI,CAAC,GAAG,GAAG,YAAY,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,SAAS,CAAC,QAAwC;QAC9D,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC;;AA1BH,gCA0CC;AAjCC;;GAEG;AACuB,2BAAgB,GAAa,EAAE,CAAC","sourcesContent":["import { CanBusAdapter } from '../main';\n\n/**\n * Abstract base class for all parsers.\n * Each parser must extend this base class, implement the `read()` and `write()`\n * methods and set its `handledDataTypes`.\n */\nexport abstract class ParserBase {\n\n  /**\n   * The config of this parser.\n   */\n  protected readonly cfg: Readonly<ioBroker.AdapterConfigMessageParser>;\n\n  protected readonly adapter: CanBusAdapter;\n\n  /**\n   * Array of data types this parser can handle.\n   */\n  protected static readonly handledDataTypes: string[] = [];\n\n  constructor(adapter: CanBusAdapter, parserConfig: ioBroker.AdapterConfigMessageParser) {\n    this.cfg = parserConfig;\n    this.adapter = adapter;\n  }\n\n  /**\n   * Check if this parser can handle a data type.\n   * @param dataType The data type to check for.\n   * @return `true` if this parser can handle the data type.\n   */\n  public static canHandle(dataType: ioBroker.AdapterConfigDataType): boolean {\n    return this.handledDataTypes.includes(dataType);\n  }\n\n  /**\n   * Read the value from the buffer.\n   * @param buf The buffer to read from.\n   * @return The value or an `Error` if the value could not be read.\n   */\n  public abstract read(buf: Buffer): Promise<boolean | number | string | unknown | Error>;\n\n  /**\n   * Write a value to the buffer.\n   * @param buf The buffer to write to.\n   * @param val The value to write.\n   * @return The new/modified buffer if the value has been written or an `Error` if the value could not be written.\n   */\n  public abstract write(buf: Buffer, val: unknown): Promise<Buffer | Error>;\n}"]}