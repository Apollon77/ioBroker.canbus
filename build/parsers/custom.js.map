{"version":3,"file":"custom.js","sourceRoot":"/","sources":["parsers/custom.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeVM } from 'vm2';\nimport { CanBusAdapter } from '../main';\n\nimport { ParserBase } from './base';\n\n/**\n * Parser for handling of custom values using user defined scripts.\n * The user defined scripts will always run in a vm2 instance.\n */\nexport class ParserCustom extends ParserBase {\n\n  protected static readonly handledDataTypes: ioBroker.AdapterConfigDataType[] = [\n    'custom'\n  ];\n\n  private static vm: NodeVM | null = null;\n\n  private scriptRead: ((buffer: Buffer) => Promise<unknown>) | null = null;\n  private scriptWrite: ((buffer: Buffer, value: unknown) => Promise<Buffer>) | null = null;\n\n  constructor(adapter: CanBusAdapter, parserConfig: ioBroker.AdapterConfigMessageParser) {\n    super(adapter, parserConfig);\n\n    // setup static VM instance on first call\n    if (ParserCustom.vm === null) {\n      ParserCustom.vm = new NodeVM({\n        sandbox: {\n          getStateAsync: this.adapter.getForeignStateAsync,\n          getObjectAsync: this.adapter.getForeignObjectAsync,\n          log: this.adapter.log\n        }\n      });\n    }\n\n    // prepare read script\n    if (this.cfg.customScriptRead) {\n      try {\n        this.scriptRead = ParserCustom.vm.run(`\n          module.exports = async (buffer) => {\n            let value = undefined;\n            ${this.cfg.customScriptRead}\n            return value;\n          }\n        `);\n      } catch (err) {\n        this.adapter.log.warn(`Error loading custom read script for parser ${this.cfg.id}! ${err}`);\n        if (typeof err.stack === 'string') {\n          this.adapter.log.warn(err.stack.replace(/^\\s*vm\\.js:\\d+.*$(\\n)/im, '').replace(/^\\s*at new Script[^]*$/im, ''));\n        }\n      }\n    } else {\n      this.adapter.log.warn(`No read script defined for parser ${this.cfg.id}! Data cannot be read.`);\n    }\n\n    // prepare write script\n    if (this.cfg.customScriptWrite) {\n      try {\n        this.scriptWrite = ParserCustom.vm.run(`\n          module.exports = async (buffer, value) => {\n            ${this.cfg.customScriptWrite}\n            return buffer;\n          }\n        `);\n      } catch (err) {\n        this.adapter.log.warn(`Error loading custom write script for parser ${this.cfg.id}! ${err}`);\n        if (typeof err.stack === 'string') {\n          this.adapter.log.warn(err.stack.replace(/^\\s*vm\\.js:\\d+.*$(\\n)/im, '').replace(/^\\s*at new Script[^]*$/im, ''));\n        }\n      }\n    } else {\n      this.adapter.log.warn(`No write script defined for parser ${this.cfg.id}! Data cannot be written.`);\n    }\n  }\n\n  public async read(buf: Buffer): Promise<unknown | Error> {\n    if (!this.scriptRead) {\n      return new Error('No read script defined');\n    }\n    try {\n      const value = await this.scriptRead(buf);\n\n      // check if the correct data type is returned and log a warning if not\n      // ... but not if undefined is returned because this may be expected\n      if (value !== undefined && this.cfg.customDataType && this.cfg.customDataType !== 'mixed' && typeof value !== this.cfg.customDataType) {\n        this.adapter.log.warn(`Parser ${this.cfg.id} returned wrong data type ${typeof value}. (expected ${this.cfg.customDataType})`);\n      }\n\n      return value;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  public async write(buf: Buffer, val: unknown): Promise <Buffer | Error> {\n    if (!this.scriptWrite) {\n      return new Error('No write script defined');\n    }\n    try {\n      return await this.scriptWrite(buf, val);\n    } catch (err) {\n      return err;\n    }\n  }\n}"]}